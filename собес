Теория
сравнение переменных - по значению и адресу, коллекции, Generics (constraints), делегаты, расширения, кортежи (tuple), records
boxing- unboxing, worker:BackgroundService (реализует IHostedService)
наследование - перегрузка, переопределение (запрет - sealed), замещение или скрытие

Многопоточность и асинхронность (Task и void в асинхронном вызове)
DI, Паттерны и SOLID
Безопасность, JWT, CORS
Конвейер, порядок объявления сервисов
Спецификации webapi - rest, graphql, grpc, soap
ORM, IQurable IEnumerable, (WithTracking, AsNoTracking)
БД - реляционные, документарные, индексы, оптимизация, триггеры, транзакции, join->left join
Виды соединений (nested loop, merge, hash), селективность, план выполнения, parameter sniffing, CTE, оконные функции -> OVER (Partition by .. Order by) row_number(), View & Materialized View

Сервисные брокеры - Rabbit, MassTransit (идемпотентность),  Kafka, Redis
Kubernetes
Архитектуры - Монолит, сервис-ориентированная архитектура, Микросервисы, Чистая архитектура, Event Sourcing

Фронт
TypeScript - стрелочная  ф-я и this, чистая функция, прототипы, null и undefined,  interface vs type,
promise, промисификация (обертка асинхронной функции вокруг промиса, вызывается как синхронная), замыкания, EventLoop,
(bind,call,apply - bind - обертка, отложенный вызов, call - замена this,перечисление аргументов; apply - тоже,передается список переменных)

Angular
state, паттерн Redux, NgRx, action -> reducer(чистая функция)
binding - интерполяция {{}}, property (к значениям), к событиям, dom -> angular(или атрибуту), 2 way (ngmodel)
автономные компоненты -> @Component standalone:true, плюсы и минусы
цикл, директива track - указывает на уникальный ключ
декоратор @input - получать значения из родительского компонента
декоратор @output - передача события внешнему компоненту, свойство EventEmitter, emit - метод передачи
структурные директивы ngIf, ngFor - звездочка - добавляет ng-template

сервисы - предоставление данных, вынос логики, взаимодействие между комплонентами
определение сервиса - директива @injectable, гарантирует что объект может быть создан и передан как зависимость
применение сервиса -  imnport, добавить в коллекцию Providers, вызвать через DI в конструкторе
различия в применении сервиса Srv и рросто New Srv - сервис тот же самый, new - новый инстанс
injection hierarchy

RxJs - stream-like flows, эмиттер (observable, data sources), subscriber(observer или listener).
observer может слушать события - data, errors, completeon.

Pipes (operators),maps - форматирование и преобразование значений, может служить как слой междку observable и observer


Vue
привязка данных - интерполяция, атрибуты - v-bind (<a v-bind:href="val"), HTML - v-html, 2-way v-model
обработчик событий - v-on:click="..."
реактивность
отличие computed от обычного метода - метод реагирует на любое изменение, computed - только на изменения внутри этогот метода
отличия computed от watch - computed на все переменные внутри метода, watch - на нужное, также - watch принимает значения текущее и новое
ref - присвоить атрибут ref html-элементу, затем можно обратиться через this.$refs.<значение ref>
директивы v-if, v-show (v-if удаляет элемент, v-show - скрывает элемент), v-for
props - передача данных от родителя к дочернему компоненту, one-way flow
this.$emit -> v-on - передача данных от потомка к родителю, может для обратного взаимодействия присылаться ссылка на функцию родительского компонента
mixins - вынос общей логики в отдельный объект, для тиражирования кода
слоты - шаблоны в потомках для импорта контекста из родителя, типа мастерных страниц в MVC
фильтры - pipes в Ангуляре, для форматирования
provide-inject - для передачи данных от родителя непосредственно в дочерний компоненте минуя промежуточные
composition api (script setup) - разделение кода не по структуре (data, computed, ...) а по функционалу

React
props, drill up и drill down, useState (прямое обновление и updater function), useEffect (однократное выполнение хука), useParams, useNavigate (прямая ссылка window.location.href)
