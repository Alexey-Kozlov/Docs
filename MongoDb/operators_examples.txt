show dbs
show collections

db.customers.insertOne({name:"bob",age:59})
db.customers.insertMany([{name:"bob",age:59},{name:"anna",age:27}])

db.orders.deleteOne({"_id":ObjectId("6404beee8fbf9bd3028c0cd9")})

db.customers.updateOne({_id:ObjectId("6404c5b68fbf9bd3028c0cdc")},{$set:{name:"Anna",age:19}})

db.orders.findOne()
db.customers.findOne({_id:ObjectId("6404beee8fbf9bd3028c0cd9")})

db.orders.aggregate([{$lookup: {from: "customers", localField:"customerid", foreignField: "_id", as: "ordersdata"}}]).pretty()
db.customers.aggregate([{$lookup: {from: "orders", localField:"_id", foreignField: "customerid", as: "ordersdata"}}]).pretty()

db.createCollection("posts",{
	validator:{
		$jsonSchema:{
			bsonType:"object",
			required:["title","text","creator","comments"],
			properties:{
				title:{
					bsonType:"string",
					description:"must be a string and is required"
				},
				text:{
					bsonType:"string",
					description:"must be a string and is required"
				},
				creator:{
					bsonType:"objectId",
					description:"must be an objectId and is required"
				},
				comments:{
					bsonType:"array",
					description:"must be an array and is required",
					items:{
						bsonType:"object", 
						required:["text","author"],
						properties:{
							text:{
								bsonType:"string",
								description:"must be an objectId and is required"
							},
							author:{
								bsonType:"objectId",
								description:"must be an objectId and is required"
							}					
						}
					}
				}	
			}
		}
	},
	validationAction:'warn'
});

--меньше или равно
db.test.find({age:{$lte:25}})
--равно
db.test.find({age:{$eq:25}}) или db.test.find({age:25})
--логическое OR
db.test.find({$or:[{age:17},{age:26}]}).pretty()
--логическое AND и OR
db.test.find({$and:[{$or:[{age:17},{age:26}]},{"doc.docname":"word"}]}).pretty()
--выбрать все записи, у которых есть поле "doc"
db.test.find({doc:{$exists:true}})
--выбрать записи по типу поля
db.test.find({age:{$type:"number"}})
--найти текст по regex - будут найдены все записи со словом "le"
db.test.find({name:{$regex:/le/}})

--количество записей
db.test.find().count()

const cur = db.test.find()
cur.next()
cur.next()
....

--есть ли еще непросмотренные элементы в курсоре
cur.hasNext()
--также просмотр всех записей
cur.forEach(doc => {printjson(doc)}) - просмотр всех элементов, или просто - cur
--сортировка
по возрастанию - db.test.find().sort({name:1})  
или по убыванию - db.test.find().sort({name:-1}) 
--пропустить первые строки
db.test.find().sort({name:1}).skip(5)
--отобразить только первые строки
db.test.find().sort({name:1}).limit(2)

--проекции
db.test.find({},{name:1, age:1}) - отобразить только name и age
db.test.find({},{name:1, age:1, _id:0})  - скрыть id

--план выполнения
db.test.explain().find({name:"rebecca"})
db.test.explain("executionStats").find({name:"rebecca"})
db.test.explain("queryPlanner").find({name:"rebecca"})

--индексы
db.test.getIndexes()
--создание индекса
db.test.createIndex({"name": 1})
db.test.createIndex({"name": 1, "age":1})
--удаление индекса
db.test.dropIndex({"name": 1})

